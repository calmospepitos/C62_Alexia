import argparse
from entrainement import Entrainement
from prediction import Prediction
from database import Database

def main():
    parser = argparse.ArgumentParser(description="Syst√®me de cooccurrences pour pr√©dire des synonymes.")

    # Arguments de ligne de commande
    parser.add_argument("-e", action="store_true", help="Mode entra√Ænement")
    parser.add_argument("-p", action="store_true", help="Mode pr√©diction")
    parser.add_argument("-b", action="store_true", help="R√©g√©n√©rer la base de donn√©es")
    parser.add_argument("-t", type=int, help="Taille de la fen√™tre")
    parser.add_argument("--encodage", type=str, help="Encodage du fichier texte")
    parser.add_argument("--chemin", type=str, help="Chemin vers le fichier texte")

    args = parser.parse_args()

    # Mode r√©g√©n√©ration
    if args.b:
        db = Database()
        db.regenerer_db()
        print("‚úÖ Base de donn√©es r√©g√©n√©r√©e avec succ√®s.")

    # Mode entra√Ænement
    elif args.e:
        if args.t and args.encodage and args.chemin:
            entrainement = Entrainement(args.t)
            entrainement.entrainer(chemin=args.chemin, enc=args.encodage)
            print("‚úÖ Entra√Ænement termin√©.")
        else:
            print("‚ùå Erreur : -t, --encodage et --chemin sont requis avec -e.")

    # Mode pr√©diction
    elif args.p:
        if args.t:
            moteur = Entrainement(args.t)

            while True:
                user_input = input(
"""Entrez un mot, le nombre de synonymes que vous voulez et la m√©thode de recherche (ex: chien 2 0).
0 : produit scalaire, 1 : moindres carr√©s, 2 : distance de Manhattan.
Tapez 'Q' pour quitter...
> """
                ).strip()

                if user_input.lower() == 'q':
                    print("üëã Fin du programme.")
                    break

                try:
                    mot, n, methode = user_input.split()
                    n = int(n)
                    methode = int(methode)

                    resultats = Prediction.predire(moteur, mot, n, methode)

                    if resultats:
                        print(f"\nüîç Les {n} synonymes de '{mot}' sont:")
                        for i, (synonyme, score) in enumerate(resultats, 1):
                            print(f"{i}. {synonyme} -> {score}")
                    else:
                        print("Aucun synonyme trouv√©.")

                except ValueError:
                    print("‚ùå Erreur: format attendu -> mot nombre m√©thode (ex: chat 5 0)")
                except Exception as e:
                    print(f"‚ùå Erreur pendant la pr√©diction : {e}")
        else:
            print("‚ùå Erreur : -t est requis avec -p.")
    else:
        print("‚ùå Aucune option valide fournie. Utilisez -e, -p ou -b.")

if __name__ == "__main__":
    main()
